; Dark JDIs solemnly swear that they are up to no good.
.global start

start:
  MOV :thread $C

thread:
  ; `MOV myaddr $C` will be injected here when duplicating (6b)
  NOP
  NOP
  NOP
  NOP
  NOP
  NOP

  ; $C has our address

  ; replicate!

  ; get a random addr
  MEMR [4] #0x20000100 $A ;read clock (6b)
  ADD $C $A ;seed with our address (2b)
  ; C-like RNG with LCG gen
  MOV #1103515245 $B ;(6b)
  MUL $B $A ;(2b)
  ADD #12345 $A ;(6b)
  ; modulo ~1Mb (a bit less so that we don't bust the mem)
  MOV #0x99000 $B ;(6b)
  DIV $A $B ;modulo is in B (2b)
  ADD #0x40000000 $B ;start from first addr (6b)
  ; $B is where we want to go

  ; store in $S
  MOV $B $S ;(2b)

  ; clean flags of future place
  MEMW [4] $S #0x20000000 ;(6b)
  MEMW [2] #0xFFF0 #0x20000004 ;(10b)
  MEMW [2] #0x0000 #0x20000004 ;(10b)
  MEMW [4] #0 #0x20000000 ;(10b)

  ; tell our future self where it is
  ; by writing a MOV ADDR $C
  AND #0xFFFFFF00 $B ;first 3 bytes of addr (6b)
  SHR #8 $B ;(6b)
  OR #0x60000000 $B ;put MOV instr (6b)
  ; B contains first half
  MEMW [4] $B $S ;(2b)
  MOV $S $A ;(2b)
  AND #0x000000FF $A ;last byte of addr (6b)
  SHL #8 $A ;(6b)
  OR #2 $A ;C register (6b)
  ; A contains second half
  MOV $S $B ;(2b)
  ADD #4 $B ;(6b)
  MEMW [2] $A $B ;(2b)

  ; copy our instructions to new location
  MOV $S $A ;A is the target address (2b)
  ADD #6 $A ;move A after the MOV that we created (6b)
  ADD #6 $C ;skip our MOV when copying (6b)

  ; read bytes from our own memory
  MEMR [4] $C $B ;(2b)
  MEMW [4] $B $A ;(2b) ;copy them over
  CMP #0x13374242 $B ;is this our mark? (6b)
  JMPR <E> #18 ;we are done!! (6b)
  ADD #4 $A ;(6b)
  ADD #4 $C ;(6b)
  JMPR <> #-34 ;go back to copying ! (6b)
  
  ; done copying. Start thread
  MEMW [4] $S #0x20000200 ;(6b)

  ; attack !
  MOV #3 $S ;number of attacks (6b)

  ; get a random addr
  MEMR [4] #0x20000100 $A ;read clock (6b)
  ADD $C $A ;seed with the end of our program (2b)
  ; C-like RNG with LCG gen
  MOV #1103515245 $B ;(6b)
  MUL $B $A ;(2b)
  ADD #12345 $A ;(6b)
  ; modulo ~1Mb (a bit less so that we don't bust the mem)
  MOV #0x1000 $B ;(6b) a 256 block
  DIV $A $B ;modulo is in B (2b)
  ; convert from block to address
  MOV #0x100 $A ;(6b)
  MUL $A $B ;(2b)
  ADD #0x40000000 $A ;start from first addr (6b)
  ; $A is where we want to hit
  
  ; sorry, this is to fix lame order of operations with our OWN threads.
  ; Otherwise, we'd trigger the MMU with a 0 in it, that WE put in there.
  ; Let's not kill ourself. #MakeNOPGreatAgain
  NOP ;(1b)
  NOP ;(1b)
  MEMW [2] #0x0000 #0x20000004 ;(10b)
  MEMW [4] $A #0x20000000 ;(6b)
  MEMW [2] #0xFF80 #0x20000004 ;(10b) you shall not execute

  ; one attack completed. Keep track of it through $S
  SUB #1 $S ;(6b)
  CMP #0 $S ;(6b)
  JMPR <E> #6 ;(6b)

  ; back to attack
  JMPR <> #-96 ;(6b)

  ; back to spreading
  JMPR <> #-292 ;(6b)

  NOP
  NOP
  .dataNumeric 0x13374242 ;WARNING!!! Whole payload must be a multiple of 4.
